const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config();

const User = require('../models/User');
const Company = require('../models/Company');
const Category = require('../models/Category');
const Complaint = require('../models/Complaint');

const seedData = async () => {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/grumble');
    console.log('Connected to MongoDB');

    // Clear existing data
    await Promise.all([
      User.deleteMany({}),
      Company.deleteMany({}),
      Category.deleteMany({}),
      Complaint.deleteMany({})
    ]);
    console.log('Cleared existing data');

    // Create categories
    const categories = await Category.insertMany([
      {
        name: 'Telekommunikasiya',
        nameEn: 'Telecommunications',
        description: 'ƒ∞nternet, telefon v…ô mobil xidm…ôtl…ôr',
        icon: 'üì±',
        color: '#3B82F6',
        order: 1
      },
      {
        name: 'Bank v…ô Maliyy…ô',
        nameEn: 'Banking & Finance',
        description: 'Bank xidm…ôtl…ôri v…ô maliyy…ô m…ôs…ôl…ôl…ôri',
        icon: 'üè¶',
        color: '#10B981',
        order: 2
      },
      {
        name: 'E-ticar…ôt',
        nameEn: 'E-commerce',
        description: 'Onlayn alƒ±≈ü-veri≈ü v…ô √ßatdƒ±rƒ±lma',
        icon: 'üõí',
        color: '#F59E0B',
        order: 3
      },
      {
        name: 'N…ôqliyyat',
        nameEn: 'Transportation',
        description: 'Taksi, avtobus v…ô dig…ôr n…ôqliyyat xidm…ôtl…ôri',
        icon: 'üöó',
        color: '#EF4444',
        order: 4
      },
      {
        name: 'Kommunal Xidm…ôtl…ôr',
        nameEn: 'Utilities',
        description: 'Su, qaz, elektrik v…ô dig…ôr kommunal xidm…ôtl…ôr',
        icon: '‚ö°',
        color: '#8B5CF6',
        order: 5
      },
      {
        name: 'Saƒülamlƒ±q',
        nameEn: 'Healthcare',
        description: 'Tibbi xidm…ôtl…ôr v…ô saƒülamlƒ±q m…ôs…ôl…ôl…ôri',
        icon: 'üè•',
        color: '#06B6D4',
        order: 6
      },
      {
        name: 'T…ôhsil',
        nameEn: 'Education',
        description: 'T…ôhsil m√º…ôssis…ôl…ôri v…ô kurslar',
        icon: 'üìö',
        color: '#84CC16',
        order: 7
      },
      {
        name: '√úmumi',
        nameEn: 'General',
        description: 'Dig…ôr xidm…ôtl…ôr',
        icon: 'üìã',
        color: '#6B7280',
        order: 8
      }
    ]);
    console.log('Created categories');

    // Create admin user
    const adminUser = await User.create({
      firstName: 'Admin',
      lastName: 'ƒ∞stifad…ô√ßi',
      email: 'admin@grumble.az',
      password: 'admin123',
      role: 'admin',
      isEmailVerified: true
    });
    console.log('Created admin user');

    // Create sample users
    const users = await User.insertMany([
      {
        firstName: '∆èli',
        lastName: 'M…ômm…ôdov',
        email: 'ali@example.com',
        password: 'password123',
        phone: '+994501234567',
        isEmailVerified: true
      },
      {
        firstName: 'Leyla',
        lastName: 'H…ôs…ônova',
        email: 'leyla@example.com',
        password: 'password123',
        phone: '+994551234567',
        isEmailVerified: true
      },
      {
        firstName: 'R…ô≈üad',
        lastName: '∆èliyev',
        email: 'reshad@example.com',
        password: 'password123',
        phone: '+994701234567',
        isEmailVerified: true
      }
    ]);
    console.log('Created sample users');

    // Create sample companies
    const companies = await Company.insertMany([
      {
        firstName: 'M√ºdir',
        lastName: '∆èliyev',
        companyName: 'Azercell',
        email: 'info@azercell.com',
        phone: '+994125551234',
        category: categories.find(c => c.name === 'Telekommunikasiya')._id,
        description: 'Az…ôrbaycanƒ±n aparƒ±cƒ± mobil operator ≈üirk…ôti',
        website: 'https://azercell.com',
        isVerified: true,
        rating: 4.2,
        totalComplaints: 45,
        resolvedComplaints: 38
      },
      {
        firstName: 'M…ôsul',
        lastName: '≈û…ôxs',
        companyName: 'Kapital Bank',
        email: 'info@kapitalbank.az',
        phone: '+994125551235',
        category: categories.find(c => c.name === 'Bank v…ô Maliyy…ô')._id,
        description: 'M√ºasir bank xidm…ôtl…ôri',
        website: 'https://kapitalbank.az',
        isVerified: true,
        rating: 4.5,
        totalComplaints: 32,
        resolvedComplaints: 29
      },
      {
        firstName: 'Koordinator',
        lastName: 'M…ômm…ôdov',
        companyName: 'Bolt Food',
        email: 'support@bolt.eu',
        phone: '+994125551236',
        category: categories.find(c => c.name === 'E-ticar…ôt')._id,
        description: 'Yem…ôk √ßatdƒ±rƒ±lma xidm…ôti',
        website: 'https://bolt.eu',
        isVerified: true,
        rating: 3.8,
        totalComplaints: 67,
        resolvedComplaints: 52
      },
      {
        firstName: 'D…ôst…ôk',
        lastName: 'Komandasƒ±',
        companyName: 'BiP',
        email: 'info@bip.az',
        phone: '+994125551237',
        category: categories.find(c => c.name === 'N…ôqliyyat')._id,
        description: 'Taksi v…ô √ßatdƒ±rƒ±lma xidm…ôti',
        website: 'https://bip.az',
        isVerified: true,
        rating: 4.0,
        totalComplaints: 28,
        resolvedComplaints: 24
      },
      {
        firstName: 'M√º≈üt…ôri',
        lastName: 'Xidm…ôtl…ôri',
        companyName: 'Azersu',
        email: 'info@azersu.az',
        phone: '+994125551238',
        category: categories.find(c => c.name === 'Kommunal Xidm…ôtl…ôr')._id,
        description: 'Su t…ôchizatƒ± v…ô kanalizasiya xidm…ôtl…ôri',
        website: 'https://azersu.az',
        isVerified: true,
        rating: 3.5,
        totalComplaints: 89,
        resolvedComplaints: 71
      }
    ]);
    console.log('Created sample companies');

    // Create sample complaints
    const complaints = [
      {
        title: 'ƒ∞nternet S√ºr…ôti Probleml…ôri',
        description: 'Evd…ô internet s√ºr…ôti √ßox z…ôifdir. M√ºqavil…ôy…ô g√∂r…ô 100 Mbps olmalƒ±dƒ±r, amma faktiki olaraq 10-15 Mbps alƒ±ram. Bu problem artƒ±q 2 h…ôft…ôdir davam edir v…ô he√ß bir h…ôll yolu tapƒ±lmƒ±r.',
        user: users[0]._id,
        company: companies[0]._id,
        category: categories.find(c => c.name === 'Telekommunikasiya')._id,
        status: 'pending',
        priority: 'high',
        incidentDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        isPublic: true,
        moderationStatus: 'approved'
      },
      {
        title: 'Kartdan Pul √áƒ±xarƒ±lmasƒ±',
        description: 'ATM-d…ôn pul √ßƒ±xarmaq ist…ôdim, amma kart bloklandƒ±. S…ôb…ôb m…ôlum deyil v…ô m√º≈üt…ôri xidm…ôtl…ôri cavab vermir.',
        user: users[1]._id,
        company: companies[1]._id,
        category: categories.find(c => c.name === 'Bank v…ô Maliyy…ô')._id,
        status: 'in_progress',
        priority: 'urgent',
        incidentDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        isPublic: true,
        moderationStatus: 'approved'
      },
      {
        title: 'Sifari≈ü Gecikm…ôsi',
        description: 'Yem…ôk sifari≈üim 2 saatdƒ±r g…ôlmir. T…ôtbiqd…ô "yolda" g√∂st…ôrir, amma he√ß bir …ôlaq…ô yoxdur.',
        user: users[2]._id,
        company: companies[2]._id,
        category: categories.find(c => c.name === 'E-ticar…ôt')._id,
        status: 'resolved',
        priority: 'medium',
        incidentDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
        isPublic: true,
        moderationStatus: 'approved',
        resolution: {
          message: 'Sifari≈üiniz √ßatdƒ±rƒ±ldƒ± v…ô kompensasiya edildi.',
          resolvedAt: new Date(Date.now() - 12 * 60 * 60 * 1000),
          resolutionTime: 12
        }
      },
      {
        title: 'S√ºr√ºc√º Davranƒ±≈üƒ±',
        description: 'Taksi s√ºr√ºc√ºs√º √ßox kobud davrandƒ± v…ô …ôlav…ô pul t…ôl…ôb etdi.',
        user: users[0]._id,
        company: companies[3]._id,
        category: categories.find(c => c.name === 'N…ôqliyyat')._id,
        status: 'resolved',
        priority: 'medium',
        incidentDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
        isPublic: true,
        moderationStatus: 'approved',
        resolution: {
          message: 'S√ºr√ºc√º il…ô s√∂hb…ôt aparƒ±ldƒ± v…ô x…ôb…ôrdarlƒ±q edildi.',
          resolvedAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000),
          resolutionTime: 24
        }
      },
      {
        title: 'Su K…ôsilm…ôsi',
        description: 'Artƒ±q 3 g√ºnd√ºr ki, rayonumuzda su yoxdur. He√ß bir m…ôlumat verilmir.',
        user: users[1]._id,
        company: companies[4]._id,
        category: categories.find(c => c.name === 'Kommunal Xidm…ôtl…ôr')._id,
        status: 'in_progress',
        priority: 'urgent',
        incidentDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        isPublic: true,
        moderationStatus: 'approved'
      }
    ];

    await Complaint.insertMany(complaints);
    console.log('Created sample complaints');

    // Update company statistics
    for (const company of companies) {
      await company.updateComplaintStats();
    }
    console.log('Updated company statistics');

    // Update category statistics
    for (const category of categories) {
      await category.updateStats();
    }
    console.log('Updated category statistics');

    console.log('\n‚úÖ Seed data created successfully!');
    console.log('\nüìä Summary:');
    console.log(`- Categories: ${categories.length}`);
    console.log(`- Users: ${users.length + 1} (including admin)`);
    console.log(`- Companies: ${companies.length}`);
    console.log(`- Complaints: ${complaints.length}`);
    console.log('\nüîê Admin Login:');
    console.log('Email: admin@grumble.az');
    console.log('Password: admin123');

    process.exit(0);

  } catch (error) {
    console.error('Error seeding data:', error);
    process.exit(1);
  }
};

// Run if called directly
if (require.main === module) {
  seedData();
}

module.exports = seedData;
